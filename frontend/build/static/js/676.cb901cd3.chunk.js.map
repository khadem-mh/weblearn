{"version":3,"file":"static/js/676.cb901cd3.chunk.js","mappings":"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","sources":["Components/FormGetData/FormGetData.jsx","Components/FormPage/FormPage.jsx","Pages/Login/Login.jsx"],"sourcesContent":["import React, { forwardRef } from 'react'\r\nimport './FormGetData.css'\r\nimport { Link } from 'react-router-dom'\r\nimport LogoHeader from '../../Components/LogoHeader/LogoHeader'\r\n\r\nconst FormGetData = forwardRef(({ title, subTitle, subTitleLink, subTitleTextLink, children, footer = true }, ref) => {\r\n\r\n    return (\r\n        <section className='register'>\r\n            <div className='backgroundImageLogin'></div>\r\n\r\n            <section className='container-form-registery'>\r\n                <LogoHeader srcLogo={'./Images/Logos/Logo-site/logo-one-copy.png'} />\r\n\r\n                <div className='form-register'>\r\n                    <h4 className='form-register__title'>{title}</h4>\r\n                    <p className='form-register__subtitle'> {subTitle} <Link to={subTitleLink}> {subTitleTextLink} </Link></p>\r\n                    <form className='user-datas' autoComplete='on' ref={ref}>\r\n                        {\r\n                            children\r\n                        }\r\n                        <button className='btn-form-register' disabled={true}>ادامه</button>\r\n                    </form>\r\n                </div>\r\n                {\r\n                    footer &&\r\n                    <div className='register__footer'>\r\n                        <strong>\r\n                            با عضویت در سایت، تمامی قوانین و شرایط استفاده از خدمت <Link to={'/'}>وب لرن</Link> را پذیرفته اید.\r\n                        </strong>\r\n                    </div>\r\n                }\r\n\r\n\r\n            </section>\r\n\r\n        </section>\r\n    )\r\n})\r\n\r\nexport default FormGetData","import React, { useState, useEffect, useRef, useContext } from 'react'\r\nimport './FormPage.css'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport FormGetData from '../FormGetData/FormGetData.jsx';\r\nimport Input from '../Input/Input.jsx';\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\n//icons\r\nimport { HiOutlineUser, HiOutlinePhone } from \"react-icons/hi2\";\r\nimport { MdOutlineAttachEmail } from \"react-icons/md\";\r\nimport { RiLockPasswordLine } from \"react-icons/ri\";\r\n//types\r\nimport {\r\n    inputFullName, inputUserName, inputPhoneNumber, inputEmail, inputPassword, textArea\r\n} from \"../../Validators/RulesInput.js\"\r\nimport { AuthContext } from '../../Contexts/AuthContext.js'\r\n//package\r\nimport swal from 'sweetalert'\r\n\r\nexport default function FormPage({ nameFormPage }) {\r\n\r\n    const navigate = useNavigate()\r\n    const formRef = useRef()\r\n    const [inpValid, setInpValid] = useState([])\r\n    const [recaptchaOk, setRecaptchaOk] = useState(false)\r\n    const authContext = useContext(AuthContext)\r\n\r\n    useEffect(() => {\r\n        let btnForm = formRef.current.lastElementChild\r\n\r\n        !recaptchaOk && btnForm.setAttribute('disabled', true)\r\n\r\n        if (window.location.pathname.includes('login') && inpValid.length === formRef.current.children.length - 2 && recaptchaOk ||\r\n            window.location.pathname.includes('register') && inpValid.length === formRef.current.children.length - 1 ||\r\n            window.location.pathname.includes('contact') && inpValid.length === formRef.current.children.length - 1) {\r\n\r\n            let isInpValid = inpValid.every(inp => !inp.valid ? false : true)\r\n\r\n            if (!isInpValid) {\r\n                btnForm.setAttribute('disabled', true)\r\n            } else {\r\n                btnForm.removeAttribute('disabled')\r\n\r\n                btnForm.addEventListener('click', e => {\r\n                    e.preventDefault()\r\n\r\n                    if (nameFormPage === 'register') {\r\n\r\n                        const newUser = {\r\n                            username: null,\r\n                            email: null,\r\n                            password: null,\r\n                            confirmPassword: null,\r\n                            name: null,\r\n                            phone: null,\r\n                        }\r\n\r\n                        inpValid.map(item => {\r\n                            item.type === inputFullName && (newUser.name = item.value)\r\n                            item.type === inputUserName && (newUser.username = item.value)\r\n                            item.type === inputPhoneNumber && (newUser.phone = item.value)\r\n                            item.type === inputEmail && (newUser.email = item.value)\r\n                            item.type === inputPassword && (newUser.password = item.value) && (newUser.confirmPassword = item.value)\r\n                            return true\r\n                        })\r\n\r\n                        fetch(`http://localhost:4000/v1/auth/register`, {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            },\r\n                            body: JSON.stringify(newUser)\r\n                        })\r\n                            .then(res => {\r\n                                if (res.ok) return res.json()\r\n                                else return res.text().then(err => { throw new Error(err) })\r\n                            })\r\n                            .then(result => {\r\n                                {\r\n                                    swal({\r\n                                        title: 'با موفقیت ثبت نام شدید',\r\n                                        icon: 'success',\r\n                                        buttons: 'ورود به پنل'\r\n                                    })\r\n                                }\r\n                                authContext.login(result.user, result.accessToken)\r\n                                window.location = '/my-account'\r\n                            })\r\n                            .catch(err => {\r\n                                {\r\n                                    swal({\r\n                                        title: 'این شماره تلفن بن شده است و شما مجاز به ثبت نام نیستید',\r\n                                        icon: 'error',\r\n                                        buttons: 'باشه'\r\n                                    })\r\n                                }\r\n                            })\r\n\r\n                    }\r\n                    else if (nameFormPage === 'login') {\r\n\r\n                        const loginUser = {\r\n                            identifier: null,\r\n                            password: null\r\n                        }\r\n\r\n                        inpValid.map(item => {\r\n                            item.type === inputEmail && (loginUser.identifier = item.value)\r\n                            item.type === inputPassword && (loginUser.password = item.value)\r\n                            return true\r\n                        })\r\n\r\n                        fetch(`http://localhost:4000/v1/auth/login`, {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            },\r\n                            body: JSON.stringify(loginUser)\r\n                        })\r\n                            .then(res => {\r\n                                if (res.ok) return res.json()\r\n                                else return res.text().then(textErr => { throw new Error(textErr) })\r\n                            })\r\n                            .then(result => {\r\n                                {\r\n                                    swal({\r\n                                        title: 'با موفقیت وارد شدید',\r\n                                        icon: 'success',\r\n                                        buttons: 'ورود به پنل'\r\n                                    }).then(val => navigate(authContext.userInfos?.role && authContext.userInfos.role === 'ADMIN' ? '/my-account' : '/p-admin'))\r\n                                }\r\n                                authContext.login(result.user, result.accessToken)\r\n                            })\r\n                            .catch(err => {\r\n                                swal({\r\n                                    title: 'همچین کاربری وجود ندارد',\r\n                                    icon: 'error',\r\n                                    buttons: 'تلاش دوباره'\r\n                                })\r\n                            })\r\n                    } else {\r\n\r\n                        const criticismUser = {\r\n                            name: null,\r\n                            email: null,\r\n                            phone: null,\r\n                            body: null,\r\n                        }\r\n\r\n                        inpValid.map(item => {\r\n                            item.type === inputFullName && (criticismUser.name = item.value)\r\n                            item.type === inputEmail && (criticismUser.email = item.value)\r\n                            item.type === inputPhoneNumber && (criticismUser.phone = item.value)\r\n                            item.type === textArea && (criticismUser.body = item.value)\r\n                            return true\r\n                        })\r\n\r\n                        fetch(`http://localhost:4000/v1/contact`, {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            },\r\n                            body: JSON.stringify(criticismUser)\r\n                        })\r\n                            .then(res => {\r\n                                if (res.ok) return res.json()\r\n                                else return res.text().then(textErr => { throw new Error(textErr) })\r\n                            })\r\n                            .then(result => {\r\n                                {\r\n                                    swal({\r\n                                        title: 'با موفقیت نظرتون ارسال شد',\r\n                                        icon: 'success',\r\n                                        buttons: 'باشه'\r\n                                    }).then(val => navigate('/'))\r\n                                }\r\n                            })\r\n                            .catch(err => {\r\n                                swal({\r\n                                    title: 'مشکلی در ارتباط با سروز پیش آمد',\r\n                                    icon: 'error',\r\n                                    buttons: 'تلاش دوباره'\r\n                                })\r\n                            })\r\n                    }\r\n\r\n                })\r\n            }\r\n        }\r\n    }, [inpValid, recaptchaOk, authContext])\r\n\r\n    const validRul = valid => {\r\n        setInpValid(state => {\r\n            if (state.length === 0) return [valid]\r\n            else {\r\n                let isRepeat = state.filter(inp => inp.type !== valid.type && inp)\r\n                if (isRepeat) return [...isRepeat, valid]\r\n            }\r\n        })\r\n    }\r\n\r\n    const onChangeHandler = () => setRecaptchaOk(prev => !prev)\r\n\r\n    return (\r\n        <FormGetData\r\n            ref={formRef}\r\n            title={nameFormPage === 'register' ? \"عضویت\" : nameFormPage === 'login' ? \"ورود با ایمیل\" : nameFormPage === 'contactus' && 'ارتباط با ما'}\r\n            subTitle={nameFormPage === 'register' ? \"قبلا ثبت نام کرده اید؟ \" : nameFormPage === 'login' ? \" حساب کاربری ندارید؟ \" : nameFormPage === 'contactus' && 'نظر یا انتقادتو برامون بنویس :)'}\r\n            subTitleTextLink={nameFormPage === 'register' ? \"وارد شوید \" : nameFormPage === 'login' ? \"ثبت نام کنید\" : nameFormPage === 'contactus' && ''}\r\n            subTitleLink={nameFormPage === 'register' ? \"/login\" : nameFormPage === 'login' ? \"/register\" : nameFormPage === 'contactus' && ''}\r\n            footer={nameFormPage === 'contactus' ? false : true}\r\n        >\r\n            {\r\n                nameFormPage === 'register'\r\n                    ?\r\n                    <>\r\n                        <Input onValid={validRul} type={inputFullName} inpPlaceholder={'نام و نام خوانوادگی'} inpIcon={<HiOutlineUser />} />\r\n                        <Input onValid={validRul} type={inputUserName} inpPlaceholder={'نام کاربری '} inpIcon={<HiOutlineUser />} />\r\n                        <Input onValid={validRul} type={inputPhoneNumber} inpPlaceholder={'شماره تلفن'} inpIcon={<HiOutlinePhone />} />\r\n                        <Input onValid={validRul} type={inputEmail} inpPlaceholder={'آدرس ایمیل'} inpIcon={<MdOutlineAttachEmail />} />\r\n                        <Input onValid={validRul} type={inputPassword} inpPlaceholder={'رمز عبور'} inpIcon={<RiLockPasswordLine />} />\r\n                    </>\r\n                    : nameFormPage === 'login' ?\r\n                        <>\r\n                            <Input onValid={validRul} type={inputEmail} inpPlaceholder={'آدرس ایمیل'} inpIcon={<MdOutlineAttachEmail />} />\r\n                            <Input onValid={validRul} type={inputPassword} inpPlaceholder={'رمز عبور'} inpIcon={<RiLockPasswordLine />} />\r\n                            <div className='parent-recaptcha'>\r\n                                <ReCAPTCHA sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\" onChange={onChangeHandler} theme=\"dark\" />\r\n                            </div>\r\n                        </>\r\n                        : nameFormPage === 'contactus' &&\r\n                        <>\r\n                            <Input onValid={validRul} type={inputFullName} inpPlaceholder={'نام و نام خوانوادگی'} inpIcon={<HiOutlineUser />} />\r\n                            <Input onValid={validRul} type={inputEmail} inpPlaceholder={'آدرس ایمیل'} inpIcon={<MdOutlineAttachEmail />} />\r\n                            <Input onValid={validRul} type={inputPhoneNumber} inpPlaceholder={'شماره تلفن'} inpIcon={<HiOutlinePhone />} />\r\n                            <Input onValid={validRul} type={textArea} inpPlaceholder={'متن خود را وارد کنید'} textarea={true} />\r\n                        </>\r\n\r\n            }\r\n        </FormGetData>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport FormPage from '../../Components/FormPage/FormPage'\r\n\r\nexport default function Login() {\r\n  return (\r\n    <section className='page-register'>\r\n      <FormPage nameFormPage={'login'} />\r\n    </section>\r\n  )\r\n}\r\n"],"names":["forwardRef","_ref","ref","title","subTitle","subTitleLink","subTitleTextLink","children","footer","_jsxs","className","_jsx","LogoHeader","srcLogo","Link","to","autoComplete","disabled","FormPage","nameFormPage","navigate","useNavigate","formRef","useRef","inpValid","setInpValid","useState","recaptchaOk","setRecaptchaOk","authContext","useContext","AuthContext","useEffect","btnForm","current","lastElementChild","setAttribute","window","location","pathname","includes","length","every","inp","valid","removeAttribute","addEventListener","e","preventDefault","newUser","username","email","password","confirmPassword","name","phone","map","item","type","inputFullName","value","inputUserName","inputPhoneNumber","inputEmail","inputPassword","fetch","method","headers","body","JSON","stringify","then","res","ok","json","text","err","Error","result","swal","icon","buttons","login","user","accessToken","catch","loginUser","identifier","textErr","val","_authContext$userInfo","userInfos","role","criticismUser","textArea","validRul","state","isRepeat","filter","FormGetData","_Fragment","Input","onValid","inpPlaceholder","inpIcon","HiOutlineUser","HiOutlinePhone","MdOutlineAttachEmail","RiLockPasswordLine","ReCAPTCHA","sitekey","onChange","onChangeHandler","prev","theme","textarea","Login"],"sourceRoot":""}